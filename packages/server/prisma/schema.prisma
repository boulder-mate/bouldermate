datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// ORGANISATIONS

model Organisation {
    id           String               @id
    account      User                 @relation(fields: [email], references: [email])
    email        String               @unique // This is used for User account relation!
    company_name String               @unique
    phone_number String
    locations    Location[]
    routesetters RoutesettersOnOrgs[]
}

// USERS

model User {
    id           String     @id
    created      String
    last_updated String
    username     String     @unique
    name         String
    email        String     @unique
    locations    Location[]
    projects     Project[]
    comments     Comment[]
    verified     Boolean

    bio String?

    // User preferences
    private Boolean

    // Additional perms
    routesetter Routesetter?
    org_account Organisation?
}

model Routesetter {
    user_id            String                 @id
    user               User                   @relation(fields: [user_id], references: [id])
    routes             RoutesettersOnRoutes[]
    organisations      RoutesettersOnOrgs[]
    routesetting_since String
}

// ROUTES

model Project {
    id       String  @id
    route    Route   @relation(fields: [route_id], references: [id])
    route_id String
    user     User    @relation(fields: [username], references: [username])
    username String
    review   Review?

    @@unique([username, route_id])
}

model Route {
    id           String                 @id
    created      String
    last_updated String
    type         RouteTypes[]
    colors       String[]
    name         String
    routesetters RoutesettersOnRoutes[]
    active       Boolean
    image        String

    location    Location  @relation(fields: [location_id], references: [id])
    location_id String
    projects    Project[]
    comments    Comment[]
}

enum RouteTypes {
    Boulder
    Lead
    TopRope
    Trad
    Ice
}

// LOCATIONS

model Location {
    id           String   @id
    created      String
    last_updated String
    name         String
    routes       Route[]
    users        User[]
    image        String
    avg_rating   Float?
    indoor       Boolean?

    // Admin
    organisation Organisation @relation(fields: [org_id], references: [id])
    org_id       String

    // Metadata
    address  String
    suburb   String
    state    String
    postcode String
    country  String
    lat      Float
    lng      Float
}

// FEEDBACK

model Comment {
    id           String @id
    created      String
    last_updated String
    route        Route  @relation(fields: [route_id], references: [id])
    route_id     String

    author    User      @relation(fields: [username], references: [username])
    username  String
    children  Comment[] @relation("Parent")
    parent    Comment?  @relation("Parent", fields: [parent_id], references: [id])
    parent_id String?
    text      String
    votes     Int
}

model Review {
    created      String
    last_updated String
    project      Project    @relation(fields: [project_id], references: [id])
    project_id   String     @id
    rating       Float
    value        Float
    type         GradeScale
}

enum GradeScale {
    VScale
    Ewbank
    YDS
}

// RELATION TABLES (n-m relations)

model RoutesettersOnOrgs {
    created      String
    last_updated String
    organisation Organisation @relation(fields: [org_id], references: [id])
    org_id       String
    routesetter  Routesetter  @relation(fields: [user_id], references: [user_id])
    user_id      String

    @@id([org_id, user_id])
}

model RoutesettersOnRoutes {
    created      String
    last_updated String
    route        Route       @relation(fields: [route_id], references: [id])
    route_id     String
    routesetter  Routesetter @relation(fields: [user_id], references: [user_id])
    user_id      String

    @@id([route_id, user_id])
}
