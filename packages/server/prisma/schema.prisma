datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// ABSTRACT DATA

type Time {
    created      String
    last_updated String
}

// ORGANISATIONS

model Organisation {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    account      User        
    company_name String
    phone_number String
}

// USERS

model User {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    when        Time
    username    String
    name        String
    email       String
    locations   Location       
    routes      Route           
    ratings     Rating          
    comments    Comment[]       
    preferences UserPreferences
    verified    Boolean

    bio String?

    routesetter Routesetter?
    org_admin   Organisation[] 
    locationId  String         @db.ObjectId
    Grade       Grade[]
}

model Routesetter {
    id                 String         @id @default(auto()) @map("_id") @db.ObjectId
    user               User           
    routes_created     Route[]        
    organisations      Organisation[] 
    routesetting_since String
}

type UserPreferences {
    private Boolean
}

// ROUTES

model Route {
    id                   String      @id @default(auto()) @map("_id") @db.ObjectId
    when                 Time
    type                 RouteTypes
    routesetter_grade    Grade       
    user_grades          Grade       
    colors               String[]
    name                 String
    routesetters         User        
    active               Boolean
    image                String
    location             Location  
    ascents              Int
    projects             Int
    ratings              Rating[]    
    comments             Comment[]   
}

enum RouteTypes {
    Boulder
    Lead
    TopRope
    Trad
    Ice
}

model Grade {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    from    User   
    type    String
    value   String
    Route   Route  
}

// LOCATIONS

model Location {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    when            Time
    name            String
    active_routes   Route[]          
    inactive_routes Route[]          
    metadata        LocationMetadata
    image           String
    ratings         Rating[]        
    comments        Comment[]       

    indoor         Boolean?
    organisation   Organisation 
    User           User[]
    organisationId String       @db.ObjectId
}

type LocationMetadata {
    address     String
    suburb      String
    state       String
    postcode    String
    country     String
    coordinates Coordinates
}

type Coordinates {
    lat Float
    lng Float
}

// FEEDBACK

model Comment {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    when       Time
    from       User      
    replies    Comment[]
    text       String
    votes      Int
}

model Rating {
    when       Time
    from       User    
    value      Float
}
